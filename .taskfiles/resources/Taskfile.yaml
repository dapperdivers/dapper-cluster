---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  RESOURCES_DIR: '{{.ROOT_DIR}}/kubernetes/patches/resources'
  RECOMMENDATIONS_BRANCH: 'resource-recommendations'

tasks:
  analyze:
    desc: Analyze resource usage and generate recommendations using Goldilocks
    cmds:
      - task: goldilocks-export
      - task: report

  analyze-namespace:
    desc: Analyze resource usage for a specific namespace
    vars:
      NS: '{{ or .NS (fail "Missing NS variable") }}'
    cmds:
      - mkdir -p {{.RESOURCES_DIR}}
      - |
        echo "üìä Exporting Goldilocks recommendations for namespace {{.NS}}..."
        kubectl get vpa -n {{.NS}} -o json | jq -r '
          .items[] | 
          select(.status.recommendation != null) |
          "---\n# Resource: \(.metadata.name)\n" +
          "# Container: \(.status.recommendation.containerRecommendations[0].containerName)\n" +
          "# Target CPU: \(.status.recommendation.containerRecommendations[0].target.cpu)\n" +
          "# Target Memory: \(.status.recommendation.containerRecommendations[0].target.memory)\n" +
          (. | tojson)
        ' > "{{.RESOURCES_DIR}}/{{.NS}}-recommendations.json"
      - echo "‚úÖ Recommendations for {{.NS}} saved to {{.RESOURCES_DIR}}/{{.NS}}-recommendations.json"

  goldilocks-export:
    desc: Export Goldilocks VPA recommendations
    cmds:
      - mkdir -p {{.RESOURCES_DIR}}
      - |
        echo "üìä Exporting Goldilocks recommendations..."
        kubectl get vpa -A -o json | jq -r '
          .items[] | 
          select(.status.recommendation != null) |
          "---\n# Namespace: \(.metadata.namespace)\n# Resource: \(.metadata.name)\n" +
          "# Recommended by Goldilocks/VPA\n" +
          (. | tojson)
        ' > "{{.RESOURCES_DIR}}/goldilocks-recommendations.json"
      - echo "‚úÖ Goldilocks recommendations exported"

  report:
    desc: Generate a summary report of all recommendations
    cmds:
      - |
        if [ -z "$(ls -A {{.RESOURCES_DIR}} 2>/dev/null)" ]; then
          echo "‚ùå No recommendations found. Run 'task resources:analyze' first."
          exit 1
        fi
      - |
        echo "üìä Resource Recommendations Summary"
        echo "=================================="
        echo ""
        for file in {{.RESOURCES_DIR}}/*.yaml; do
          if [ -f "$file" ]; then
            ns=$(basename "$file" -recommendations.yaml)
            echo "Namespace: $ns"
            echo "File: $file"
            echo "---"
          fi
        done
      - echo ""
      - echo "‚úÖ Review the files in {{.RESOURCES_DIR}}/ for detailed recommendations"

  preview:
    desc: Preview resource recommendations without creating files
    cmds:
      - |
        echo "üîç Preview mode - showing Goldilocks recommendations..."
        for ns in $(kubectl get ns -l goldilocks.fairwinds.com/enabled=true -o jsonpath='{.items[*].metadata.name}'); do
          echo -e "\n=== Namespace: $ns ==="
          kubectl get vpa -n "$ns" -o custom-columns=NAME:.metadata.name,CPU:.status.recommendation.containerRecommendations[0].target.cpu,MEMORY:.status.recommendation.containerRecommendations[0].target.memory,CONTAINER:.status.recommendation.containerRecommendations[0].containerName | grep -v "<none>" || echo "  No recommendations available"
        done

  clean:
    desc: Clean up generated recommendation files
    cmds:
      - rm -rf {{.RESOURCES_DIR}}
      - echo "‚úÖ Cleaned up recommendation files"

  apply-to-helmrelease:
    desc: Generate Flux Kustomization patches for HelmReleases
    vars:
      NS: '{{ or .NS (fail "Missing NS variable") }}'
      APP: '{{ or .APP (fail "Missing APP variable") }}'
    cmds:
      - mkdir -p {{.ROOT_DIR}}/kubernetes/apps/{{.NS}}/{{.APP}}/app/patches
      - |
        # Read the recommendations
        if [ -f "{{.RESOURCES_DIR}}/{{.NS}}-recommendations.yaml" ]; then
          echo "üìù Creating patch for {{.NS}}/{{.APP}}"
          cat > {{.ROOT_DIR}}/kubernetes/apps/{{.NS}}/{{.APP}}/app/patches/resources.yaml << 'EOF'
        apiVersion: helm.toolkit.fluxcd.io/v2
        kind: HelmRelease
        metadata:
          name: {{.APP}}
        spec:
          values:
            resources:
              # TODO: Copy the recommended values from {{.RESOURCES_DIR}}/{{.NS}}-recommendations.yaml
              requests:
                cpu: "100m"
                memory: "128Mi"
              limits:
                cpu: "500m"
                memory: "512Mi"
        EOF
          echo "‚úÖ Created patch template at kubernetes/apps/{{.NS}}/{{.APP}}/app/patches/resources.yaml"
          echo "‚ö†Ô∏è  Please update the resource values based on the recommendations"
        else
          echo "‚ùå No recommendations found for namespace {{.NS}}"
          echo "   Run 'task resources:analyze' first"
        fi