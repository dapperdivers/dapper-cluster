---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

# Taskfile for managing storage class migrations
# Primary use case: Migrating PVCs from mayastor-single-replica to cephfs-shared (and later to ceph-rbd)

vars:
  KUBECTL: kubectl

tasks:

  list-mayastor:
    desc: List all PVCs still using mayastor-single-replica storage class
    summary: |
      Shows which PVCs are still on mayastor storage to help track migration progress.
      Groups by namespace for easier planning.
    cmds:
      - |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "PVCs using mayastor-single-replica storage class:"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""

        PVCS=$({{.KUBECTL}} get pvc -A -o json | jq -r '.items[] | select(.spec.storageClassName=="mayastor-single-replica") | "\(.metadata.namespace)/\(.metadata.name)"' | sort)

        if [ -z "$PVCS" ]; then
          echo "✅ No PVCs found using mayastor-single-replica!"
          echo "   All PVCs have been migrated off Mayastor."
        else
          COUNT=$(echo "$PVCS" | wc -l)
          echo "$PVCS" | awk -F/ '{print "  " $1 "/" $2}'
          echo ""
          echo "Total: $COUNT PVCs still on mayastor-single-replica"
          echo ""
          echo "Run: task storage:migrate-pvc APP=<app> NS=<namespace> STORAGE_CLASS=cephfs-shared"
        fi
        echo ""

  verify-volsync:
    desc: Check volsync backup status for all apps
    summary: |
      Lists all ReplicationSources and their last sync time.
      Use this to verify apps have recent backups before migrating.
    cmds:
      - |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "Volsync Backup Status (ReplicationSources):"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        printf "%-20s %-25s %-25s %s\n" "NAMESPACE" "APP" "LAST SYNC" "STATUS"
        echo "────────────────────────────────────────────────────────────────────────────────────"

        {{.KUBECTL}} get replicationsources -A -o json | jq -r '.items[] |
          [.metadata.namespace, .metadata.name, (.status.lastSyncTime // "Never"), (.status.lastSyncDuration // "N/A")] |
          @tsv' | while IFS=$'\t' read -r ns name sync duration; do
          printf "%-20s %-25s %-25s %s\n" "$ns" "$name" "$sync" "$duration"
        done
        echo ""

  show-progress:
    desc: Show migration progress - apps migrated vs remaining
    summary: |
      Displays which apps have been migrated to cephfs-shared (have overrides in ks.yaml)
      and which are still using default (mayastor).
    cmds:
      - |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "Storage Migration Progress:"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""

        MIGRATED=0
        PENDING=0

        echo "Apps with storage class override (migrated to cephfs-shared):"
        echo "────────────────────────────────────────────────────────────────"

        # Find all ks.yaml files with VOLSYNC_STORAGECLASS override
        for ks_file in kubernetes/apps/*/*/ks.yaml; do
          if [ -f "$ks_file" ]; then
            if grep -q "VOLSYNC_STORAGECLASS.*cephfs-shared" "$ks_file" 2>/dev/null; then
              app=$(basename $(dirname "$ks_file"))
              ns=$(basename $(dirname $(dirname "$ks_file")))
              echo "  ✅ $ns/$app"
              MIGRATED=$((MIGRATED + 1))
            fi
          fi
        done

        echo ""
        echo "Apps still using default storage class (pending migration):"
        echo "────────────────────────────────────────────────────────────────"

        # Find apps with volsync component but no override
        for ks_file in kubernetes/apps/*/*/ks.yaml; do
          if [ -f "$ks_file" ]; then
            # Check if uses volsync component and has VOLSYNC_CAPACITY
            if grep -q "VOLSYNC_CAPACITY" "$ks_file" 2>/dev/null; then
              # Check if doesn't have cephfs override
              if ! grep -q "VOLSYNC_STORAGECLASS.*cephfs-shared" "$ks_file" 2>/dev/null; then
                app=$(basename $(dirname "$ks_file"))
                ns=$(basename $(dirname $(dirname "$ks_file")))
                echo "  ⏳ $ns/$app"
                PENDING=$((PENDING + 1))
              fi
            fi
          fi
        done

        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        TOTAL=$((MIGRATED + PENDING))
        PERCENT=0
        if [ $TOTAL -gt 0 ]; then
          PERCENT=$((MIGRATED * 100 / TOTAL))
        fi
        echo "Progress: $MIGRATED/$TOTAL apps migrated ($PERCENT%)"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""

  migrate-with-korb:
    desc: Migrate a PVC to new storage class using korb [PVC=required] [NS=namespace] [NEW_SC=cephfs-shared]
    summary: |
      Uses korb to migrate a PVC to a new storage class.
      This tool handles the data migration automatically.

      Examples:
        task storage:migrate-with-korb PVC=bazarr NS=media NEW_SC=cephfs-shared
        task storage:migrate-with-korb PVC=n8n-files NS=ai
    vars:
      NS: '{{.NS | default "default"}}'
      NEW_SC: '{{.NEW_SC | default "cephfs-shared"}}'
    requires:
      vars: [PVC, NS]
    preconditions:
      - sh: '{{.KUBECTL}} --namespace {{.NS}} get pvc {{.PVC}} &>/dev/null'
        msg: 'PVC {{.PVC}} not found in namespace {{.NS}}'
      - sh: '{{.KUBECTL}} get storageclass {{.NEW_SC}} &>/dev/null'
        msg: 'Storage class {{.NEW_SC}} does not exist'
    cmds:
      - |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "Migrating PVC: {{.PVC}} ({{.NS}})"
        echo "Target Storage Class: {{.NEW_SC}}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""

        # Show current PVC details
        echo "Current PVC details:"
        CURRENT_SC=$({{.KUBECTL}} get pvc {{.PVC}} -n {{.NS}} -o jsonpath='{.spec.storageClassName}')
        SIZE=$({{.KUBECTL}} get pvc {{.PVC}} -n {{.NS}} -o jsonpath='{.spec.resources.requests.storage}')
        echo "  Storage Class: $CURRENT_SC"
        echo "  Size: $SIZE"
        echo ""

        # Run korb
        echo "Running korb migration..."
        mise exec -- korb {{.PVC}} \
          --source-namespace {{.NS}} \
          --new-pvc-storage-class {{.NEW_SC}} \
          --strategy copy-twice-name \
          --kube-config {{.ROOT_DIR}}/kubeconfig \
          --debug

        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "✅ Migration complete for {{.PVC}}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""

  migrate-static-pvc-with-korb:
    desc: Migrate a static PVC and update manifest [APP=required] [NS=required] [PVC=required] [NEW_SC=cephfs-shared]
    summary: |
      Migrates a static PVC using korb and updates the pvc.yaml manifest.
      Use this for static PVCs that have hardcoded storage classes.

      Examples:
        task storage:migrate-static-pvc-with-korb APP=plex NS=media PVC=plex-cache
        task storage:migrate-static-pvc-with-korb APP=n8n NS=ai PVC=n8n-files
    vars:
      NS: '{{.NS | default "default"}}'
      NEW_SC: '{{.NEW_SC | default "cephfs-shared"}}'
      PVC_FILE: '{{.ROOT_DIR}}/kubernetes/apps/{{.NS}}/{{.APP}}/app/pvc.yaml'
      CONTROLLER:
        sh: '{{.KUBECTL}} --namespace {{.NS}} get deployment {{.APP}} &>/dev/null && echo deployment || ({{.KUBECTL}} --namespace {{.NS}} get statefulset {{.APP}} &>/dev/null && echo statefulset || echo cronjob)'
      ORIGINAL_REPLICAS:
        sh: '{{.KUBECTL}} --namespace {{.NS}} get {{.CONTROLLER}}/{{.APP}} -o jsonpath="{.spec.replicas}" 2>/dev/null || echo "1"'
    requires:
      vars: [APP, NS, PVC]
    preconditions:
      - sh: '[ -f "{{.PVC_FILE}}" ]'
        msg: 'PVC file not found at {{.PVC_FILE}}'
      - sh: '{{.KUBECTL}} --namespace {{.NS}} get pvc {{.PVC}} &>/dev/null'
        msg: 'PVC {{.PVC}} not found in namespace {{.NS}}'
    cmds:
      - |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "Migrating Static PVC: {{.PVC}} ({{.NS}}/{{.APP}})"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""

        # Step 1: Scale down app
        echo "1. Scaling down {{.APP}}..."
        if [ "{{.CONTROLLER}}" = "cronjob" ]; then
          {{.KUBECTL}} patch cronjob {{.APP}} -n {{.NS}} -p '{"spec":{"suspend":true}}'
        else
          {{.KUBECTL}} --namespace {{.NS}} scale {{.CONTROLLER}}/{{.APP}} --replicas=0
          echo "   Waiting for pods to terminate..."
          {{.KUBECTL}} --namespace {{.NS}} wait pod --for=delete --selector="app.kubernetes.io/name={{.APP}}" --timeout=5m || true
        fi
        echo "   ✅ App scaled down"
        echo ""

        # Step 2: Run korb migration
        echo "2. Running korb migration..."
        mise exec -- korb {{.PVC}} \
          --source-namespace {{.NS}} \
          --new-pvc-storage-class {{.NEW_SC}} \
          --strategy copy-twice-name \
          --kube-config {{.ROOT_DIR}}/kubeconfig \
          --debug

        echo ""
        echo "✅ Data migration complete"
        echo ""

        # Step 3: Update manifest
        echo "3. Updating PVC manifest..."
        sed -i 's/storageClassName: mayastor-single-replica/storageClassName: {{.NEW_SC}}/g' {{.PVC_FILE}}
        sed -i 's/ReadWriteOnce/ReadWriteMany/g' {{.PVC_FILE}}
        echo "   Updated {{.PVC_FILE}}"
        echo ""

        # Step 4: Scale up app
        echo "4. Scaling up {{.APP}}..."
        if [ "{{.CONTROLLER}}" = "cronjob" ]; then
          {{.KUBECTL}} patch cronjob {{.APP}} -n {{.NS}} -p '{"spec":{"suspend":false}}'
          echo "   ✅ CronJob resumed"
        else
          {{.KUBECTL}} --namespace {{.NS}} scale {{.CONTROLLER}}/{{.APP}} --replicas={{.ORIGINAL_REPLICAS}}
          echo "   Waiting for pods to be ready..."
          {{.KUBECTL}} --namespace {{.NS}} wait pod --for=condition=ready --selector="app.kubernetes.io/name={{.APP}}" --timeout=10m
          echo "   ✅ App scaled up and running"
        fi
        echo ""

        # Step 5: Commit changes
        git add {{.PVC_FILE}}
        echo "5. Commit changes..."
        read -p "Commit and push changes? (y/N): " REPLY
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          git commit -m "chore({{.NS}}): migrate {{.PVC}} to {{.NEW_SC}}" \
            -m "Migrated static PVC using korb from mayastor to {{.NEW_SC}}." \
            -m "Data was preserved during migration."
          git push
          echo "   ✅ Changes committed and pushed"
        else
          echo "   ⚠️  Changes staged but not committed"
        fi
        echo ""

        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "✅ Migration complete for {{.PVC}}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
