---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app supabase-support
  namespace: database
spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  values:
    controllers:
      supabase-support:
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          imgproxy:
            image:
              repository: darthsim/imgproxy
              tag: v3.25.0
            env:
              IMGPROXY_BIND: "0.0.0.0:5001"
              IMGPROXY_LOCAL_FILESYSTEM_ROOT: "/var/lib/storage"
              IMGPROXY_USE_ETAG: "true"
              IMGPROXY_ENABLE_WEBP_DETECTION: "true"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL
            probes:
              liveness: &imgproxyProbes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: &imgproxyPort 5001
                  initialDelaySeconds: 30
                  periodSeconds: 30
                  timeoutSeconds: 5
                  failureThreshold: 3
              readiness: *imgproxyProbes
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 512Mi

          meta:
            image:
              repository: supabase/postgres-meta
              tag: v0.84.2
            env:
              PG_META_PORT: &metaPort 8080
              PG_META_DB_HOST: "${INIT_POSTGRES_HOST}"
              PG_META_DB_PORT: "5432"
              PG_META_DB_NAME: "${INIT_POSTGRES_DBNAME}"
              PG_META_DB_USER: "${INIT_POSTGRES_USER}"
              PG_META_DB_PASSWORD: "${INIT_POSTGRES_PASS}"
            envFrom:
              - secretRef:
                  name: supabase-postgres-secret
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL
            probes:
              liveness: &metaProbes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *metaPort
                  initialDelaySeconds: 30
                  periodSeconds: 30
                  timeoutSeconds: 5
                  failureThreshold: 3
              readiness: *metaProbes
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 512Mi

          analytics:
            image:
              repository: supabase/logflare
              tag: 1.5.2
            env:
              LOG_LEVEL: "info"
              DB_USERNAME: "${INIT_POSTGRES_USER}"
              DB_DATABASE: "${INIT_POSTGRES_DBNAME}"
              DB_HOSTNAME: "${INIT_POSTGRES_HOST}"
              DB_PORT: "5432"
              API_PORT: &analyticsPort 4000
              SINGLE_TENANT: "true"
              SUPABASE_MODE: "true"
              POSTGRES_BACKEND_URL: "postgresql://${INIT_POSTGRES_USER}:${INIT_POSTGRES_PASS}@${INIT_POSTGRES_HOST}:5432/${INIT_POSTGRES_DBNAME}"
              POSTGRES_BACKEND_SCHEMA: "_analytics"
              LOGFLARE_NODE_HOST: "127.0.0.1"
            envFrom:
              - secretRef:
                  name: supabase-postgres-secret
              - secretRef:
                  name: supabase-secret
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities:
                drop:
                  - ALL
            probes:
              liveness: &analyticsProbes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *analyticsPort
                  initialDelaySeconds: 60
                  periodSeconds: 30
                  timeoutSeconds: 10
                  failureThreshold: 3
              readiness: *analyticsProbes
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                cpu: 1000m
                memory: 1Gi

          vector:
            image:
              repository: timberio/vector
              tag: 0.41.1-alpine
            env:
              VECTOR_CONFIG: "/etc/vector/vector.yaml"
              VECTOR_REQUIRE_HEALTHY: "true"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL
            probes:
              liveness: &vectorProbes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: &vectorPort 9001
                  initialDelaySeconds: 30
                  periodSeconds: 30
                  timeoutSeconds: 5
                  failureThreshold: 3
              readiness: *vectorProbes
            resources:
              requests:
                cpu: 50m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 256Mi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile: { type: RuntimeDefault }

    persistence:
      data:
        existingClaim: supabase
        globalMounts:
          - path: /var/lib/storage
            subPath: storage

      vector-config:
        type: configMap
        name: supabase-vector-config
        advancedMounts:
          supabase-support:
            vector:
              - path: /etc/vector
                readOnly: true

    service:
      app:
        controller: *app
        type: ClusterIP
        ports:
          imgproxy:
            port: *imgproxyPort
          meta:
            port: *metaPort
          analytics:
            port: *analyticsPort
          vector:
            port: *vectorPort
