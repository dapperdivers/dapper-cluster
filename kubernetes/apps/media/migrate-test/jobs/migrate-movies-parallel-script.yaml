---
apiVersion: v1
kind: ConfigMap
metadata:
  name: migrate-movies-parallel-script
  namespace: media
data:
  migrate.sh: |
    #!/bin/sh
    set -e

    # Map JOB_COMPLETION_INDEX (0-25) to letter (A-Z)
    INDEX=$${JOB_COMPLETION_INDEX:-0}
    LETTERS="A B C D E F G H I J K L M N O P Q R S T U V W X Y Z"
    LETTER=$$(echo $$LETTERS | cut -d' ' -f$$((INDEX + 1)))

    SOURCE="/tower-2/movies"
    DEST="/destination/movies"
    LOG_FILE="/metrics/migration-$${LETTER}.log"
    BATCH_SIZE=20

    echo "======================================"
    echo "Job Index: $${INDEX}"
    echo "Processing Letter: $${LETTER}"
    echo "Batch Size: $${BATCH_SIZE} folders at a time"
    echo "Started at: $$(date)"
    echo "======================================"

    # Get list of all directories starting with this letter
    echo "[$$(date)] Scanning for directories starting with $${LETTER}..."
    TMPFILE="/tmp/dirs-$${LETTER}.txt"
    find "$${SOURCE}/" -maxdepth 1 -type d -name "$${LETTER}*" | sed "s|$${SOURCE}/||" | sort > $$TMPFILE
    TOTAL_DIRS=$$(wc -l < $$TMPFILE)

    if [ $$TOTAL_DIRS -eq 0 ]; then
        echo "[$$(date)] No directories found for letter $${LETTER}, skipping..."
        rm -f $$TMPFILE
        exit 0
    fi

    echo "[$$(date)] Found $$TOTAL_DIRS directories for letter $${LETTER}"
    total_batches=$$(( (TOTAL_DIRS + BATCH_SIZE - 1) / BATCH_SIZE ))
    echo "[$$(date)] Will process in $$total_batches batches of up to $${BATCH_SIZE} folders each"

    # Process in batches - using single rsync call per batch with --files-from
    batch_num=1
    counter=0
    batch_count=0

    while IFS= read -r dir_name; do
        # Skip empty lines
        [ -z "$$dir_name" ] && continue

        # Start new batch
        if [ $$(( counter % BATCH_SIZE )) -eq 0 ]; then
            # Run previous batch's rsync if not the first batch
            if [ $$counter -gt 0 ]; then
                echo "[$$(date)] Running rsync for batch $$batch_num ($$batch_count folders)..."

                # Use --files-from with --relative to sync only listed dirs (no full scan!)
                # The -R flag makes rsync use relative paths from the source
                rsync \
                    --recursive \
                    --relative \
                    --links \
                    --times \
                    --stats \
                    --verbose \
                    --human-readable \
                    --whole-file \
                    --remove-source-files \
                    --files-from="$${TMPFILE}.batch" \
                    --log-file="$${LOG_FILE}" \
                    "$${SOURCE}/" \
                    "$${DEST}/"

                if [ $$? -ne 0 ]; then
                    echo "ERROR: rsync failed for letter $${LETTER} batch $$batch_num"
                    rm -f $$TMPFILE "$${TMPFILE}.batch"
                    exit 1
                fi

                echo "[$$(date)] Batch $$batch_num completed successfully"
                batch_num=$$(( batch_num + 1 ))
                rm -f "$${TMPFILE}.batch"
            fi

            # Initialize new batch
            batch_start=$$(( counter + 1 ))
            batch_end=$$(( counter + BATCH_SIZE ))
            [ $$batch_end -gt $$TOTAL_DIRS ] && batch_end=$$TOTAL_DIRS

            echo ""
            echo "======================================"
            echo "[$$(date)] Batch $$batch_num/$$total_batches: Items $$batch_start-$$batch_end of $$TOTAL_DIRS"
            echo "======================================"

            batch_count=0
        fi

        # Add directory to batch file (relative path from SOURCE)
        echo "./$$dir_name" >> "$${TMPFILE}.batch"
        batch_count=$$(( batch_count + 1 ))
        counter=$$(( counter + 1 ))

    done < $$TMPFILE

    # Run final batch
    if [ $$batch_count -gt 0 ]; then
        echo "[$$(date)] Running rsync for batch $$batch_num ($$batch_count folders)..."

        rsync \
            --recursive \
            --relative \
            --links \
            --times \
            --stats \
            --verbose \
            --human-readable \
            --whole-file \
            --remove-source-files \
            --files-from="$${TMPFILE}.batch" \
            --log-file="$${LOG_FILE}" \
            "$${SOURCE}/" \
            "$${DEST}/"

        if [ $$? -ne 0 ]; then
            echo "ERROR: rsync failed for letter $${LETTER} batch $$batch_num"
            rm -f $$TMPFILE "$${TMPFILE}.batch"
            exit 1
        fi

        echo "[$$(date)] Batch $$batch_num completed successfully"
        rm -f "$${TMPFILE}.batch"
    fi

    rm -f $$TMPFILE
    echo ""
    echo "[$$(date)] All $$total_batches batches completed for letter $${LETTER}"

    # Step 2: Fix permissions on destination (CephFS only - no NFS overhead)
    echo "[$$(date)] Fixing permissions for letter $${LETTER}..."

    # Find all directories starting with this letter and set to 755
    find "$${DEST}/" -maxdepth 1 -type d -name "$${LETTER}*" -print0 | while IFS= read -r -d '' dir; do
        echo "Setting directory permissions: $${dir}"
        find "$$dir" -type d -exec chmod 755 {} +
        find "$$dir" -type f -exec chmod 644 {} +
        find "$$dir" -exec chown 1000:140 {} +
    done

    echo "[$$(date)] Permissions fixed for letter $${LETTER}"
    echo "======================================"
    echo "Letter $${LETTER} fully completed at: $$(date)"
    echo "======================================"

    exit 0
