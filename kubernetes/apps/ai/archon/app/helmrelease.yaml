---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app archon
spec:
  interval: 5m
  timeout: 5m
  chartRef:
    kind: OCIRepository
    name: archon
  install:
    createNamespace: true
    remediation:
      retries: 1
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 1

  values:
    # Global configuration
    global:
      imageRegistry: "ghcr.io"
      imagePullSecrets: []

    # Container images
    image:
      server:
        repository: dapperdivers/archon-dev-server
        tag: 2025-08-20-4840eaf
        pullPolicy: IfNotPresent
      mcp:
        repository: dapperdivers/archon-dev-mcp
        tag: 2025-08-20-4840eaf
        pullPolicy: IfNotPresent
      agents:
        repository: dapperdivers/archon-dev-agents
        tag: 2025-08-20-4840eaf
        pullPolicy: IfNotPresent
      ui:
        repository: dapperdivers/archon-dev-frontend
        tag: 2025-08-20-4840eaf
        pullPolicy: IfNotPresent
      sidecar:
        repository: dapperdivers/archon-dev-sidecar
        tag: 2025-08-20-4840eaf
        pullPolicy: IfNotPresent

    # Replica count
    replicaCount: 1

    # Application configuration
    config:
      deploymentMode: kubernetes
      serviceDiscoveryMode: kubernetes
      logLevel: INFO
      transport: sse

      # Enhanced crawler configuration for production stability
      crawling:
        pageTimeout: 90000         # 90 second page timeout
        waitStrategy: "networkidle" # Wait for network to be idle
        delayBeforeHtml: 3.0       # 3 second delay for JS rendering
        maxRetries: 2              # Retry failed pages up to 2 times
        retryDelay: 5000           # 5 second delay between retries

      # Frontend configuration for Kubernetes
      frontend:
        dockerEnv: false           # Use localhost in Kubernetes pods
        useIngressForApi: true     # Use ingress host for API calls
        apiUrl: ""                 # Auto-detect from ingress

      sidecar:
        enabled: true
        port: 8053

      # MCP Configuration (simplified for unified deployment)
      mcp:
        # Basic MCP server settings
        serverPort: 8051
        logLevel: "INFO"

    # Service configuration
    service:
      type: ClusterIP
      annotations: {}
      server:
        port: 8181
      mcp:
        port: 8051
      agents:
        port: 8052
      ui:
        port: 5173

    # Ingress configuration
    ingress:
      enabled: true
      className: internal
      annotations:
        external-dns.alpha.kubernetes.io/target: "internal.${SECRET_DOMAIN}"
        # Socket.IO WebSocket support
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/cors-allow-methods: "GET,PUT,POST,DELETE,PATCH,OPTIONS"
        nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
        # Remove rewrite-target to preserve API paths
        # nginx.ingress.kubernetes.io/rewrite-target: /
      hosts:
        - host: &host "archon.${SECRET_DOMAIN}"
          paths:
            - path: /
              pathType: Prefix
              service: archon
              port: ui
            - path: /api
              pathType: Prefix
              service: archon
              port: server
            - path: /socket.io
              pathType: Prefix
              service: archon
              port: server
      tls:
        - hosts:
            - *host
          secretName: "${SECRET_DOMAIN/./-}-tls"

    # Resource configuration
    resources:
      server:
        limits:
          cpu: 1000m
          memory: 2Gi
        requests:
          cpu: 100m
          memory: 512Mi
      sidecar:
        limits:
          cpu: 200m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
      mcp:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 50m
          memory: 256Mi
      agents:
        limits:
          cpu: 1000m
          memory: 2Gi
        requests:
          cpu: 100m
          memory: 512Mi
      ui:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 50m
          memory: 256Mi

    # Secrets configuration - use existing secrets
    secrets:
      create: false
      existingSecret: "archon-secret"

    # Service Account
    serviceAccount:
      create: true
      annotations: {}
      name: ""

    # RBAC configuration
    rbac:
      create: true

    # Security Context
    podSecurityContext:
      runAsNonRoot: true
      runAsUser: 1001
      runAsGroup: 1001
      fsGroup: 1001
      seccompProfile:
        type: RuntimeDefault

    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: false
      runAsNonRoot: true
      runAsUser: 1001

    # Production health checks (more conservative)
    healthChecks:
      livenessProbe:
        initialDelaySeconds: 120   # Allow startup time
        periodSeconds: 30          # Check every 30 seconds
        timeoutSeconds: 10         # 10 second timeout
        successThreshold: 1
        failureThreshold: 3        # Allow 3 failures before restart
      readinessProbe:
        initialDelaySeconds: 30    # Ready check after 30s
        periodSeconds: 15          # Check every 15 seconds
        timeoutSeconds: 5          # 5 second timeout
        successThreshold: 1
        failureThreshold: 2        # Allow 2 failures before marking unready

    # Persistence - disabled until chart supports it
    persistence:
      enabled: false
      storageClass: ""
      accessMode: ReadWriteOnce
      size: 5Gi

    # Pod annotations
    podAnnotations:
      reloader.stakater.com/auto: "true"

    # Production monitoring (enable if you have Prometheus)
    monitoring:
      enabled: false               # Set to true if you have Prometheus Operator
      serviceMonitor:
        enabled: false
        interval: 30s
        scrapeTimeout: 10s
        labels: {}
        endpoints:
          - port: server
            path: /metrics
          - port: mcp
            path: /metrics
          - port: agents
            path: /metrics

    # Node selection
    nodeSelector: {}
    tolerations: []
    affinity: {}
