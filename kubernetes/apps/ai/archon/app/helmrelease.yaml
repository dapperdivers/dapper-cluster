---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app archon
spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  values:
    controllers:
      archon:
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          git-sync:
            env:
              GITSYNC_REPO: https://github.com/coleam00/Archon
              GITSYNC_REF: main
              GITSYNC_ROOT: /git
              GITSYNC_DEPTH: 1
              GITSYNC_ONE_TIME: "true"
            image:
              repository: registry.k8s.io/git-sync/git-sync
              tag: v4.4.2@sha256:3089d9787b89bdc5af01d9f6e8d515aefb9672e8aea3972d7ff67478112bacb3
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 128Mi
          wait-for-supabase:
            image:
              repository: busybox
              tag: 1.36.1@sha256:650fd573e056b679a5110a70aabeb01e26b76e545ec4b9c70a9523f2dfaf18c6
            command:
              - sh
              - -c
              - |
                echo "Waiting for Supabase to be ready..."
                until wget --quiet --tries=1 --timeout=3 --spider https://supabase.${SECRET_DOMAIN}/health || [ $? -eq 4 ]; do
                  echo "Supabase not ready, waiting 5 seconds..."
                  sleep 5
                done
                echo "Supabase is ready!"
            resources:
              requests:
                cpu: 10m
                memory: 32Mi
              limits:
                cpu: 50m
                memory: 64Mi
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17.5@sha256:e0c87ce7df39d06b93f27cf2cc6a056611f13faaa88cc07ab4dc8bf7a85d0b11
            envFrom:
              - secretRef:
                  name: archon-postgres-secret
            resources:
              requests:
                cpu: 10m
                memory: 64Mi
              limits:
                cpu: 100m
                memory: 256Mi
            command:
              - /bin/bash
              - -c
              - |
                # First run the standard postgres-init
                /entrypoint.sh

                # Then run the Archon schema setup
                if [ -f /git/Archon/migration/complete_setup.sql ]; then
                  echo "Setting up Archon database schema..."
                  PGPASSWORD="$INIT_POSTGRES_SUPER_PASS" psql \
                    -h "$INIT_POSTGRES_HOST" \
                    -U "$INIT_POSTGRES_SUPER_USER" \
                    -d "$INIT_POSTGRES_DBNAME" \
                    -f /git/Archon/migration/complete_setup.sql
                  echo "Archon schema setup completed"
                else
                  echo "Warning: Archon SQL setup file not found at /git/Archon/migration/complete_setup.sql"
                fi
        containers:
          frontend:
            image:
              repository: ghcr.io/dapperdivers/archon-frontend
              tag: latest
            env:
              HOST: "0.0.0.0"
              PORT: &frontendPort 5173
              VITE_PORT: 5173
              VITE_HOST: "0.0.0.0"
              ARCHON_SERVER_URL: "http://archon.ai.svc.cluster.local:8181"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities:
                drop:
                  - ALL
            probes:
              liveness: &frontendProbes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: *frontendPort
                  initialDelaySeconds: 30
                  periodSeconds: 60
                  timeoutSeconds: 10
                  failureThreshold: 3
              readiness: *frontendProbes
            resources:
              requests:
                cpu: 50m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 1Gi

          server:
            image:
              repository: ghcr.io/dapperdivers/archon-server
              tag: latest
            env:
              HOST: "0.0.0.0"
              PORT: &serverPort 8181
              SERVICE_DISCOVERY_MODE: "kubernetes"
              LOG_LEVEL: "INFO"
            envFrom:
              - secretRef:
                  name: archon-postgres-secret
              - secretRef:
                  name: archon-supabase-secret
              - secretRef:
                  name: *app
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities:
                drop:
                  - ALL
            probes:
              liveness: &serverProbes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *serverPort
                  initialDelaySeconds: 30
                  periodSeconds: 60
                  timeoutSeconds: 10
                  failureThreshold: 3
              readiness: *serverProbes
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                cpu: 1000m
                memory: 2Gi

          mcp:
            image:
              repository: ghcr.io/dapperdivers/archon-mcp
              tag: latest
            env:
              HOST: "0.0.0.0"
              PORT: &mcpPort 8051
              ARCHON_SERVER_URL: "http://archon.ai.svc.cluster.local:8181"
              AGENTS_URL: "http://archon.ai.svc.cluster.local:8052"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities:
                drop:
                  - ALL
            probes:
              liveness: &mcpProbes
                enabled: false
              readiness: *mcpProbes
            resources:
              requests:
                cpu: 50m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 512Mi

          agents:
            image:
              repository: ghcr.io/dapperdivers/archon-agents
              tag: latest
            env:
              HOST: "0.0.0.0"
              PORT: &agentsPort 8052
              ARCHON_SERVER_PORT: *serverPort
            envFrom:
              - secretRef:
                  name: archon-postgres-secret
              - secretRef:
                  name: archon-supabase-secret
              - secretRef:
                  name: *app
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities:
                drop:
                  - ALL
            probes:
              liveness: &agentsProbes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *agentsPort
                  initialDelaySeconds: 30
                  periodSeconds: 60
                  timeoutSeconds: 10
                  failureThreshold: 3
              readiness: *agentsProbes
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                cpu: 1000m
                memory: 2Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
        seccompProfile: { type: RuntimeDefault }

    persistence:
      git-repo:
        type: emptyDir
        globalMounts:
          - path: /git

    service:
      app:
        controller: *app
        ports:
          http:
            port: *frontendPort
          server:
            port: *serverPort
          mcp:
            port: *mcpPort
          agents:
            port: *agentsPort

    ingress:
      app:
        annotations:
          external-dns.alpha.kubernetes.io/target: "internal.${SECRET_DOMAIN}"
        className: internal
        hosts:
          - host: &host "archon.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
              - path: /mcp
                service:
                  identifier: app
                  port: mcp
        tls:
          - hosts:
              - *host
            secretName: "${SECRET_DOMAIN/./-}-tls"
